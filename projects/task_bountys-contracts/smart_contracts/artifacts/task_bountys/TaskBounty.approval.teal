#pragma version 10
#pragma typetrack false

// algopy.arc4.ARC4Contract.approval_program() -> uint64:
main:
    intcblock 0 1 4
    bytecblock "asset_id" "unitary_price"
    // smart_contracts/task_bountys/contract.py:19-20
    // # We want the methods in our contract to follow the ARC4 standard
    // class TaskBounty(arc4.ARC4Contract):
    txn NumAppArgs
    bz main_after_if_else@11
    pushbytess 0x878cbb3d 0xcc760037 0x1574535a 0x790bf59f 0x33b3499e // method "create_application(asset,uint64)void", method "set_price(uint64)void", method "opt_in_to_asset(pay)void", method "buy(pay,uint64)void", method "delete_application()void"
    txna ApplicationArgs 0
    match main_create_application_route@3 main_set_price_route@4 main_opt_in_to_asset_route@5 main_buy_route@6 main_delete_application_route@7

main_after_if_else@11:
    // smart_contracts/task_bountys/contract.py:19-20
    // # We want the methods in our contract to follow the ARC4 standard
    // class TaskBounty(arc4.ARC4Contract):
    intc_0 // 0
    return

main_delete_application_route@7:
    // smart_contracts/task_bountys/contract.py:114-117
    // @arc4.abimethod(
    //     # This method is called when the application is deleted
    //     allow_actions=["DeleteApplication"]
    // )
    txn OnCompletion
    pushint 5 // DeleteApplication
    ==
    assert // OnCompletion is not DeleteApplication
    txn ApplicationID
    assert // can only call when not creating
    callsub delete_application
    intc_1 // 1
    return

main_buy_route@6:
    // smart_contracts/task_bountys/contract.py:93
    // @arc4.abimethod
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // smart_contracts/task_bountys/contract.py:19-20
    // # We want the methods in our contract to follow the ARC4 standard
    // class TaskBounty(arc4.ARC4Contract):
    txn GroupIndex
    intc_1 // 1
    -
    dup
    gtxns TypeEnum
    intc_1 // pay
    ==
    assert // transaction type is pay
    txna ApplicationArgs 1
    btoi
    // smart_contracts/task_bountys/contract.py:93
    // @arc4.abimethod
    callsub buy
    intc_1 // 1
    return

main_opt_in_to_asset_route@5:
    // smart_contracts/task_bountys/contract.py:58-60
    // # Before any account can receive an asset, it must opt-in to it
    // # This method enables the application to opt-in to the asset
    // @arc4.abimethod
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // smart_contracts/task_bountys/contract.py:19-20
    // # We want the methods in our contract to follow the ARC4 standard
    // class TaskBounty(arc4.ARC4Contract):
    txn GroupIndex
    intc_1 // 1
    -
    dup
    gtxns TypeEnum
    intc_1 // pay
    ==
    assert // transaction type is pay
    // smart_contracts/task_bountys/contract.py:58-60
    // # Before any account can receive an asset, it must opt-in to it
    // # This method enables the application to opt-in to the asset
    // @arc4.abimethod
    callsub opt_in_to_asset
    intc_1 // 1
    return

main_set_price_route@4:
    // smart_contracts/task_bountys/contract.py:48
    // @arc4.abimethod
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // smart_contracts/task_bountys/contract.py:19-20
    // # We want the methods in our contract to follow the ARC4 standard
    // class TaskBounty(arc4.ARC4Contract):
    txna ApplicationArgs 1
    btoi
    // smart_contracts/task_bountys/contract.py:48
    // @arc4.abimethod
    callsub set_price
    intc_1 // 1
    return

main_create_application_route@3:
    // smart_contracts/task_bountys/contract.py:28-36
    // # We want create_application to be a plublic ABI method
    // @arc4.abimethod(
    //     # There are certain actions that a contract call can do
    //     # Some examples are UpdateApplication, DeleteApplication, and NoOp
    //     # NoOp is a call that does nothing special after it is exected
    //     allow_actions=["NoOp"],
    //     # Require that this method is only callable when creating the app
    //     create="require",
    // )
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    !
    assert // can only call when creating
    // smart_contracts/task_bountys/contract.py:19-20
    // # We want the methods in our contract to follow the ARC4 standard
    // class TaskBounty(arc4.ARC4Contract):
    txna ApplicationArgs 1
    btoi
    txnas Assets
    txna ApplicationArgs 2
    btoi
    // smart_contracts/task_bountys/contract.py:28-36
    // # We want create_application to be a plublic ABI method
    // @arc4.abimethod(
    //     # There are certain actions that a contract call can do
    //     # Some examples are UpdateApplication, DeleteApplication, and NoOp
    //     # NoOp is a call that does nothing special after it is exected
    //     allow_actions=["NoOp"],
    //     # Require that this method is only callable when creating the app
    //     create="require",
    // )
    callsub create_application
    intc_1 // 1
    return


// smart_contracts.task_bountys.contract.TaskBounty.create_application(asset_id: uint64, unitary_price: uint64) -> void:
create_application:
    // smart_contracts/task_bountys/contract.py:28-43
    // # We want create_application to be a plublic ABI method
    // @arc4.abimethod(
    //     # There are certain actions that a contract call can do
    //     # Some examples are UpdateApplication, DeleteApplication, and NoOp
    //     # NoOp is a call that does nothing special after it is exected
    //     allow_actions=["NoOp"],
    //     # Require that this method is only callable when creating the app
    //     create="require",
    // )
    // def create_application(
    //     self,
    //     # The ID of the asset we're selling
    //     asset_id: Asset,
    //     # The initial sale price
    //     unitary_price: UInt64,
    // ) -> None:
    proto 2 0
    // smart_contracts/task_bountys/contract.py:44-45
    // # Save the values we passed in to our method in the contract's state
    // self.asset_id = asset_id.id
    bytec_0 // "asset_id"
    frame_dig -2
    app_global_put
    // smart_contracts/task_bountys/contract.py:46
    // self.unitary_price = unitary_price
    bytec_1 // "unitary_price"
    frame_dig -1
    app_global_put
    retsub


// smart_contracts.task_bountys.contract.TaskBounty.set_price(unitary_price: uint64) -> void:
set_price:
    // smart_contracts/task_bountys/contract.py:48-49
    // @arc4.abimethod
    // def set_price(self, unitary_price: UInt64) -> None:
    proto 1 0
    // smart_contracts/task_bountys/contract.py:50-53
    // # We don't want anyone to be able to come in and modify the price
    // # You could implement some sort of RBAC,
    // # but in this case just making sure the caller is the app creator works
    // assert Txn.sender == Global.creator_address
    txn Sender
    global CreatorAddress
    ==
    assert
    // smart_contracts/task_bountys/contract.py:55-56
    // # Save the new price
    // self.unitary_price = unitary_price
    bytec_1 // "unitary_price"
    frame_dig -1
    app_global_put
    retsub


// smart_contracts.task_bountys.contract.TaskBounty.opt_in_to_asset(mbr_pay: uint64) -> void:
opt_in_to_asset:
    // smart_contracts/task_bountys/contract.py:58-66
    // # Before any account can receive an asset, it must opt-in to it
    // # This method enables the application to opt-in to the asset
    // @arc4.abimethod
    // def opt_in_to_asset(
    //     self,
    //     # Whenever someone calls this method, they also need to send a payment
    //     # A payment transaction is a transfer of ALGO
    //     mbr_pay: gtxn.PaymentTransaction,
    // ) -> None:
    proto 1 0
    // smart_contracts/task_bountys/contract.py:67-68
    // # We want to make sure that the application address is not already opted in
    // assert not Global.current_application_address.is_opted_in(Asset(self.asset_id))
    global CurrentApplicationAddress
    intc_0 // 0
    bytec_0 // "asset_id"
    app_global_get_ex
    assert // check self.asset_id exists
    asset_holding_get AssetBalance
    bury 1
    !
    assert
    // smart_contracts/task_bountys/contract.py:73-75
    // # Just because we made it an argument to the method, there's no gurantee
    // # it is being sent to the aplication's address so we need to manually assert
    // assert mbr_pay.receiver == Global.current_application_address
    frame_dig -1
    gtxns Receiver
    global CurrentApplicationAddress
    ==
    assert
    // smart_contracts/task_bountys/contract.py:77-81
    // # On Algorand, each account has a minimum balance requirement (MBR)
    // # The MBR is locked in the account and cannot be spent (until explicitly unlocked)
    // # Every accounts has an MBR of 0.1 ALGO (Global.min_balance)
    // # Opting into an asset increases the MBR by 0.1 ALGO (Global.asset_opt_in_min_balance)
    // assert mbr_pay.amount == Global.min_balance + Global.asset_opt_in_min_balance
    frame_dig -1
    gtxns Amount
    global MinBalance
    global AssetOptInMinBalance
    +
    ==
    assert
    // smart_contracts/task_bountys/contract.py:83-91
    // # Transactions can be sent from a user via signatures
    // # They can also be sent programmatically from a smart contract
    // # Here we want to issue an opt-in transaction
    // # An opt-in transaction is simply transferring 0 of an asset to yourself
    // itxn.AssetTransfer(
    //     xfer_asset=self.asset_id,
    //     asset_receiver=Global.current_application_address,
    //     asset_amount=0,
    // ).submit()
    itxn_begin
    // smart_contracts/task_bountys/contract.py:88
    // xfer_asset=self.asset_id,
    intc_0 // 0
    bytec_0 // "asset_id"
    app_global_get_ex
    assert // check self.asset_id exists
    // smart_contracts/task_bountys/contract.py:89
    // asset_receiver=Global.current_application_address,
    global CurrentApplicationAddress
    // smart_contracts/task_bountys/contract.py:90
    // asset_amount=0,
    intc_0 // 0
    itxn_field AssetAmount
    itxn_field AssetReceiver
    itxn_field XferAsset
    // smart_contracts/task_bountys/contract.py:83-87
    // # Transactions can be sent from a user via signatures
    // # They can also be sent programmatically from a smart contract
    // # Here we want to issue an opt-in transaction
    // # An opt-in transaction is simply transferring 0 of an asset to yourself
    // itxn.AssetTransfer(
    intc_2 // axfer
    itxn_field TypeEnum
    intc_0 // 0
    itxn_field Fee
    // smart_contracts/task_bountys/contract.py:83-91
    // # Transactions can be sent from a user via signatures
    // # They can also be sent programmatically from a smart contract
    // # Here we want to issue an opt-in transaction
    // # An opt-in transaction is simply transferring 0 of an asset to yourself
    // itxn.AssetTransfer(
    //     xfer_asset=self.asset_id,
    //     asset_receiver=Global.current_application_address,
    //     asset_amount=0,
    // ).submit()
    itxn_submit
    retsub


// smart_contracts.task_bountys.contract.TaskBounty.buy(buyer_txn: uint64, quantity: uint64) -> void:
buy:
    // smart_contracts/task_bountys/contract.py:93-100
    // @arc4.abimethod
    // def buy(
    //     self,
    //     # To buy assets, a payment must be sent
    //     buyer_txn: gtxn.PaymentTransaction,
    //     # The quantity of assets to buy
    //     quantity: UInt64,
    // ) -> None:
    proto 2 0
    // smart_contracts/task_bountys/contract.py:101-103
    // # We need to verify that the payment is being sent to the application
    // # and is enough to cover the cost of the asset
    // assert buyer_txn.sender == Txn.sender
    frame_dig -2
    gtxns Sender
    txn Sender
    ==
    assert
    // smart_contracts/task_bountys/contract.py:104
    // assert buyer_txn.receiver == Global.current_application_address
    frame_dig -2
    gtxns Receiver
    global CurrentApplicationAddress
    ==
    assert
    // smart_contracts/task_bountys/contract.py:105
    // assert buyer_txn.amount == self.unitary_price * quantity
    frame_dig -2
    gtxns Amount
    intc_0 // 0
    bytec_1 // "unitary_price"
    app_global_get_ex
    assert // check self.unitary_price exists
    frame_dig -1
    *
    ==
    assert
    // smart_contracts/task_bountys/contract.py:107-112
    // # Once we've verified the payment, we can transfer the asset
    // itxn.AssetTransfer(
    //     xfer_asset=self.asset_id,
    //     asset_receiver=Txn.sender,
    //     asset_amount=quantity,
    // ).submit()
    itxn_begin
    // smart_contracts/task_bountys/contract.py:109
    // xfer_asset=self.asset_id,
    intc_0 // 0
    bytec_0 // "asset_id"
    app_global_get_ex
    assert // check self.asset_id exists
    // smart_contracts/task_bountys/contract.py:110
    // asset_receiver=Txn.sender,
    txn Sender
    frame_dig -1
    itxn_field AssetAmount
    itxn_field AssetReceiver
    itxn_field XferAsset
    // smart_contracts/task_bountys/contract.py:107-108
    // # Once we've verified the payment, we can transfer the asset
    // itxn.AssetTransfer(
    intc_2 // axfer
    itxn_field TypeEnum
    intc_0 // 0
    itxn_field Fee
    // smart_contracts/task_bountys/contract.py:107-112
    // # Once we've verified the payment, we can transfer the asset
    // itxn.AssetTransfer(
    //     xfer_asset=self.asset_id,
    //     asset_receiver=Txn.sender,
    //     asset_amount=quantity,
    // ).submit()
    itxn_submit
    retsub


// smart_contracts.task_bountys.contract.TaskBounty.delete_application() -> void:
delete_application:
    // smart_contracts/task_bountys/contract.py:119-120
    // # Only allow the creator to delete the application
    // assert Txn.sender == Global.creator_address
    txn Sender
    global CreatorAddress
    ==
    assert
    // smart_contracts/task_bountys/contract.py:122-131
    // # Send all the unsold assets to the creator
    // itxn.AssetTransfer(
    //     xfer_asset=self.asset_id,
    //     asset_receiver=Global.creator_address,
    //     # The amount is 0, but the asset_close_to field is set
    //     # This means that ALL assets are being sent to the asset_close_to address
    //     asset_amount=0,
    //     # Close the asset to unlock the 0.1 ALGO that was locked in opt_in_to_asset
    //     asset_close_to=Global.creator_address,
    // ).submit()
    itxn_begin
    // smart_contracts/task_bountys/contract.py:124
    // xfer_asset=self.asset_id,
    intc_0 // 0
    bytec_0 // "asset_id"
    app_global_get_ex
    assert // check self.asset_id exists
    // smart_contracts/task_bountys/contract.py:125
    // asset_receiver=Global.creator_address,
    global CreatorAddress
    // smart_contracts/task_bountys/contract.py:129-130
    // # Close the asset to unlock the 0.1 ALGO that was locked in opt_in_to_asset
    // asset_close_to=Global.creator_address,
    dup
    itxn_field AssetCloseTo
    // smart_contracts/task_bountys/contract.py:126-128
    // # The amount is 0, but the asset_close_to field is set
    // # This means that ALL assets are being sent to the asset_close_to address
    // asset_amount=0,
    intc_0 // 0
    itxn_field AssetAmount
    itxn_field AssetReceiver
    itxn_field XferAsset
    // smart_contracts/task_bountys/contract.py:122-123
    // # Send all the unsold assets to the creator
    // itxn.AssetTransfer(
    intc_2 // axfer
    itxn_field TypeEnum
    intc_0 // 0
    itxn_field Fee
    // smart_contracts/task_bountys/contract.py:122-131
    // # Send all the unsold assets to the creator
    // itxn.AssetTransfer(
    //     xfer_asset=self.asset_id,
    //     asset_receiver=Global.creator_address,
    //     # The amount is 0, but the asset_close_to field is set
    //     # This means that ALL assets are being sent to the asset_close_to address
    //     asset_amount=0,
    //     # Close the asset to unlock the 0.1 ALGO that was locked in opt_in_to_asset
    //     asset_close_to=Global.creator_address,
    // ).submit()
    itxn_submit
    // smart_contracts/task_bountys/contract.py:133-139
    // # Send the remaining balance to the creator
    // itxn.Payment(
    //     receiver=Global.creator_address,
    //     amount=0,
    //     # Close the account to get back ALL the ALGO in the account
    //     close_remainder_to=Global.creator_address,
    // ).submit()
    itxn_begin
    // smart_contracts/task_bountys/contract.py:135
    // receiver=Global.creator_address,
    global CreatorAddress
    // smart_contracts/task_bountys/contract.py:137-138
    // # Close the account to get back ALL the ALGO in the account
    // close_remainder_to=Global.creator_address,
    dup
    itxn_field CloseRemainderTo
    // smart_contracts/task_bountys/contract.py:136
    // amount=0,
    intc_0 // 0
    itxn_field Amount
    itxn_field Receiver
    // smart_contracts/task_bountys/contract.py:133-134
    // # Send the remaining balance to the creator
    // itxn.Payment(
    intc_1 // pay
    itxn_field TypeEnum
    intc_0 // 0
    itxn_field Fee
    // smart_contracts/task_bountys/contract.py:133-139
    // # Send the remaining balance to the creator
    // itxn.Payment(
    //     receiver=Global.creator_address,
    //     amount=0,
    //     # Close the account to get back ALL the ALGO in the account
    //     close_remainder_to=Global.creator_address,
    // ).submit()
    itxn_submit
    retsub
