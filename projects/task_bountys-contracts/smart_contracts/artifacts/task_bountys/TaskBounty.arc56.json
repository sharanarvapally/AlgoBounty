{
    "name": "TaskBounty",
    "structs": {},
    "methods": [
        {
            "name": "create_application",
            "args": [
                {
                    "type": "asset",
                    "name": "asset_id"
                },
                {
                    "type": "uint64",
                    "name": "unitary_price"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [
                    "NoOp"
                ],
                "call": []
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "set_price",
            "args": [
                {
                    "type": "uint64",
                    "name": "unitary_price"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "opt_in_to_asset",
            "args": [
                {
                    "type": "pay",
                    "name": "mbr_pay"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "buy",
            "args": [
                {
                    "type": "pay",
                    "name": "buyer_txn"
                },
                {
                    "type": "uint64",
                    "name": "quantity"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "delete_application",
            "args": [],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "DeleteApplication"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        }
    ],
    "arcs": [
        22,
        28
    ],
    "networks": {},
    "state": {
        "schema": {
            "global": {
                "ints": 2,
                "bytes": 0
            },
            "local": {
                "ints": 0,
                "bytes": 0
            }
        },
        "keys": {
            "global": {
                "asset_id": {
                    "keyType": "AVMString",
                    "valueType": "AVMUint64",
                    "key": "YXNzZXRfaWQ="
                },
                "unitary_price": {
                    "keyType": "AVMString",
                    "valueType": "AVMUint64",
                    "key": "dW5pdGFyeV9wcmljZQ=="
                }
            },
            "local": {},
            "box": {}
        },
        "maps": {
            "global": {},
            "local": {},
            "box": {}
        }
    },
    "bareActions": {
        "create": [],
        "call": []
    },
    "sourceInfo": {
        "approval": {
            "sourceInfo": [
                {
                    "pc": [
                        85
                    ],
                    "errorMessage": "OnCompletion is not DeleteApplication"
                },
                {
                    "pc": [
                        97,
                        123,
                        145,
                        161
                    ],
                    "errorMessage": "OnCompletion is not NoOp"
                },
                {
                    "pc": [
                        165
                    ],
                    "errorMessage": "can only call when creating"
                },
                {
                    "pc": [
                        88,
                        100,
                        126,
                        148
                    ],
                    "errorMessage": "can only call when not creating"
                },
                {
                    "pc": [
                        215,
                        245,
                        299,
                        328
                    ],
                    "errorMessage": "check self.asset_id exists"
                },
                {
                    "pc": [
                        289
                    ],
                    "errorMessage": "check self.unitary_price exists"
                },
                {
                    "pc": [
                        110,
                        136
                    ],
                    "errorMessage": "transaction type is pay"
                }
            ],
            "pcOffsetMethod": "none"
        },
        "clear": {
            "sourceInfo": [],
            "pcOffsetMethod": "none"
        }
    },
    "source": {
        "approval": "",
        "clear": "I3ByYWdtYSB2ZXJzaW9uIDEwCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBhbGdvcHkuYXJjNC5BUkM0Q29udHJhY3QuY2xlYXJfc3RhdGVfcHJvZ3JhbSgpIC0+IHVpbnQ2NDoKbWFpbjoKICAgIHB1c2hpbnQgMSAvLyAxCiAgICByZXR1cm4K"
    },
    "byteCode": {
        "approval": "CiADAAEEJgIIYXNzZXRfaWQNdW5pdGFyeV9wcmljZTEbQQAqggUEh4y7PQTMdgA3BBV0U1oEeQv1nwQzs0meNhoAjgUAUABAACoAEAACIkMxGYEFEkQxGESIAOIjQzEZFEQxGEQxFiMJSTgQIxJENhoBF4gAkSNDMRkURDEYRDEWIwlJOBAjEkSIAEMjQzEZFEQxGEQ2GgEXiAAlI0MxGRREMRgURDYaARfAMDYaAheIAAIjQ4oCACiL/mcpi/9niYoBADEAMgkSRCmL/2eJigEAMgoiKGVEcABFARREi/84BzIKEkSL/zgIMgEyEAgSRLEiKGVEMgoishKyFLIRJLIQIrIBs4mKAgCL/jgAMQASRIv+OAcyChJEi/44CCIpZUSL/wsSRLEiKGVEMQCL/7ISshSyESSyECKyAbOJMQAyCRJEsSIoZUQyCUmyFSKyErIUshEkshAisgGzsTIJSbIJIrIIsgcjshAisgGziQ==",
        "clear": "CoEBQw=="
    },
    "compilerInfo": {
        "compiler": "puya",
        "compilerVersion": {
            "major": 4,
            "minor": 7,
            "patch": 0
        }
    },
    "events": [],
    "templateVariables": {}
}